// Code generated by sqlc. DO NOT EDIT.
// source: book.sql

package sqlc

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO book (
        id,
        name,
        image
    )
VALUES ($1, $2, $3)
RETURNING id, name, image, description
`

type CreateBookParams struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Image *string `json:"image"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.ID, arg.Name, arg.Image)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Description,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM book
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, name, image, description
FROM book
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Description,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, name, image, description
FROM book 
WHERE (name ilike '%' || $1::varchar || '%' OR image ilike '%' || $1::varchar || '%')
OFFSET $2 LIMIT $3
`

type GetBooksParams struct {
	Search string `json:"search"`
	Offset int32  `json:"_offset"`
	Limit  int32  `json:"_limit"`
}

func (q *Queries) GetBooks(ctx context.Context, arg GetBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCount = `-- name: GetCount :one
SELECT count(1)
FROM book 
WHERE (name ilike '%' || $1::varchar || '%' OR image ilike '%' || $1::varchar || '%')
`

func (q *Queries) GetCount(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCount, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBook = `-- name: UpdateBook :exec
UPDATE book
SET name = $1,
    image = $2
WHERE id = $3
`

type UpdateBookParams struct {
	Name  string  `json:"name"`
	Image *string `json:"image"`
	ID    string  `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.Name, arg.Image, arg.ID)
	return err
}
