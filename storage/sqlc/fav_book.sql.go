// Code generated by sqlc. DO NOT EDIT.
// source: fav_book.sql

package sqlc

import (
	"context"
)

const createFavBook = `-- name: CreateFavBook :one
INSERT INTO fav_book (
        book_id,
        user_id
    )
VALUES ($1, $2)
RETURNING book_id, user_id
`

type CreateFavBookParams struct {
	BookID string `json:"book_id"`
	UserID string `json:"user_id"`
}

func (q *Queries) CreateFavBook(ctx context.Context, arg CreateFavBookParams) (FavBook, error) {
	row := q.db.QueryRowContext(ctx, createFavBook, arg.BookID, arg.UserID)
	var i FavBook
	err := row.Scan(&i.BookID, &i.UserID)
	return i, err
}

const deleteFavBook = `-- name: DeleteFavBook :exec
DELETE FROM fav_book
WHERE book_id = $1 AND user_id = $2
`

type DeleteFavBookParams struct {
	BookID string `json:"book_id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteFavBook(ctx context.Context, arg DeleteFavBookParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavBook, arg.BookID, arg.UserID)
	return err
}

const getAllFavBooks = `-- name: GetAllFavBooks :many
SELECT book_id, user_id
FROM fav_book
ORDER BY created_at desc OFFSET $1
LIMIT $2
`

type GetAllFavBooksParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetAllFavBooks(ctx context.Context, arg GetAllFavBooksParams) ([]FavBook, error) {
	rows, err := q.db.QueryContext(ctx, getAllFavBooks, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FavBook
	for rows.Next() {
		var i FavBook
		if err := rows.Scan(&i.BookID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavBook = `-- name: GetFavBook :one
SELECT book_id, user_id
FROM fav_book
WHERE user_id = $1 AND book_id = $2
LIMIT 1
`

type GetFavBookParams struct {
	UserID string `json:"user_id"`
	BookID string `json:"book_id"`
}

func (q *Queries) GetFavBook(ctx context.Context, arg GetFavBookParams) (FavBook, error) {
	row := q.db.QueryRowContext(ctx, getFavBook, arg.UserID, arg.BookID)
	var i FavBook
	err := row.Scan(&i.BookID, &i.UserID)
	return i, err
}

const getUsersFavBooks = `-- name: GetUsersFavBooks :many
SELECT fb.user_id, fb.book_id, b.name, b.image FROM fav_book as fb LEFT JOIN book as b on fb.book_id = b.id WHERE user_id = $1
`

type GetUsersFavBooksRow struct {
	UserID string  `json:"user_id"`
	BookID string  `json:"book_id"`
	Name   string  `json:"name"`
	Image  *string `json:"image"`
}

func (q *Queries) GetUsersFavBooks(ctx context.Context, userID string) ([]GetUsersFavBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersFavBooks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersFavBooksRow
	for rows.Next() {
		var i GetUsersFavBooksRow
		if err := rows.Scan(
			&i.UserID,
			&i.BookID,
			&i.Name,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFavBook = `-- name: UpdateFavBook :exec
UPDATE fav_book
SET book_id = $1
WHERE user_id = $2 AND book_id = $3
`

type UpdateFavBookParams struct {
	BookID   string `json:"book_id"`
	UserID   string `json:"user_id"`
	BookID_2 string `json:"book_id_2"`
}

func (q *Queries) UpdateFavBook(ctx context.Context, arg UpdateFavBookParams) error {
	_, err := q.db.ExecContext(ctx, updateFavBook, arg.BookID, arg.UserID, arg.BookID_2)
	return err
}
